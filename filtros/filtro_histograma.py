from fastapi import APIRouter, File, UploadFile, HTTPException
from PIL import Image
import io
import numpy as np

router = APIRouter()

TEMPLATE_HISTOGRAM = {
    "r": [10, 7, 5, 11, 20, 18, 18, 32, 42, 41, 40, 56, 60, 51, 88, 81, 98, 67, 98, 71, 64, 78, 58, 68, 46, 81, 71, 78, 84, 113, 112, 100, 118, 130, 134, 139, 191, 187, 219, 245, 220, 212, 272, 280, 212, 232, 252, 287, 187, 237, 197, 223, 225, 240, 234, 217, 288, 251, 233, 274, 307, 305, 362, 365, 313, 326, 330, 321, 305, 282, 240, 232, 1001, 301, 13970, 26909, 37774, 675, 465, 60954, 20273, 26995, 22029, 1412, 4079, 1215, 1618, 4054, 2007, 1921, 2595, 294, 4584, 966, 1392, 4233, 2037, 2922, 4709, 640, 2115, 1426, 2668, 4214, 473, 599, 1843, 16128, 13762, 53866, 177, 53794, 152, 6908, 13582, 60533, 13576, 202, 183, 197, 260, 274, 273, 283, 329, 364, 301, 305, 321, 289, 254, 292, 333, 335, 448, 284, 309, 265, 374, 292, 190, 319, 194, 186, 186, 164, 172, 152, 149, 152, 142, 107, 120, 128, 110, 128, 127, 106, 116, 92, 125, 115, 110, 121, 114, 96, 112, 102, 113, 108, 109, 102, 111, 82, 113, 128, 128, 109, 103, 105, 108, 129, 120, 110, 117, 119, 110, 749, 100, 160, 137, 116, 91, 115, 121, 158, 135, 131, 100, 129, 116, 137, 123, 120, 130, 159, 133, 108, 98, 111, 120, 153, 131, 129, 149, 810, 153, 120, 134, 145, 99, 138, 808, 124, 132, 142, 149, 870, 162, 150, 880, 167, 1574, 215, 263, 562, 1145, 3599, 868, 587, 561, 339, 259, 294, 254, 962, 282, 249, 280, 445, 335, 544, 2154, 564, 8549, 516057],
    "g": [6, 2, 0, 6, 3, 7, 6, 9, 10, 14, 19, 26, 25, 36, 42, 43, 72, 81, 108, 146, 155, 192, 264, 1026, 547, 54052, 112058, 44018, 10023, 8699, 10313, 8276, 7781, 39481, 135336, 60872, 297, 244, 262, 244, 914, 216, 206, 208, 214, 227, 237, 937, 296, 277, 312, 374, 367, 355, 378, 384, 346, 341, 357, 349, 283, 276, 277, 293, 251, 231, 204, 228, 178, 147, 162, 126, 133, 142, 144, 148, 127, 128, 141, 120, 109, 109, 101, 141, 113, 122, 112, 139, 112, 124, 144, 178, 442, 532, 410, 420, 240, 176, 200, 200, 166, 159, 185, 143, 129, 161, 149, 168, 157, 189, 173, 135, 170, 195, 196, 204, 227, 226, 249, 227, 258, 251, 226, 186, 212, 150, 180, 143, 158, 160, 146, 121, 136, 133, 127, 131, 114, 113, 108, 122, 104, 94, 106, 105, 105, 134, 119, 123, 100, 122, 103, 106, 107, 118, 105, 117, 106, 109, 121, 791, 103, 115, 122, 107, 114, 106, 96, 118, 130, 105, 99, 101, 115, 118, 115, 130, 110, 104, 127, 122, 112, 119, 122, 118, 118, 116, 132, 127, 125, 126, 136, 135, 152, 835, 128, 139, 151, 151, 189, 200, 205, 240, 271, 217, 232, 186, 198, 152, 190, 186, 119, 134, 137, 131, 160, 122, 107, 119, 126, 117, 145, 834, 144, 148, 160, 196, 822, 195, 174, 872, 177, 1549, 264, 307, 555, 1216, 3598, 815, 593, 546, 373, 236, 323, 276, 990, 421, 443, 866, 988, 856, 2137, 897, 1918, 8220, 28631, 483081],
    "b": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 0, 1, 1, 0, 1, 3, 10, 6, 3, 11, 8, 9, 10, 14, 7, 12, 17, 23, 32, 23, 28, 40, 33, 42, 40, 44, 68, 42, 79, 76, 81, 109, 117, 118, 130, 163, 130, 162, 196, 191, 203, 251, 243, 245, 213, 247, 214, 210, 250, 247, 232, 219, 214, 219, 223, 217, 213, 207, 191, 210, 215, 256, 227, 241, 248, 285, 275, 251, 212, 268, 212, 195, 209, 149, 193, 148, 173, 158, 163, 188, 171, 203, 183, 857, 219, 265, 250, 1008, 401, 391, 380, 782, 12605, 47890, 46405, 74729, 10279, 24979, 4306, 10466, 2482, 5001, 4381, 6209, 1734, 6627, 2151, 29853, 54011, 60806, 13698, 74063, 294, 296, 301, 265, 292, 272, 280, 268, 237, 235, 264, 255, 225, 277, 273, 389, 481, 423, 406, 349, 266, 330, 293, 190, 191, 198, 161, 191, 153, 159, 161, 159, 145, 130, 127, 105, 121, 134, 125, 177, 150, 175, 175, 212, 216, 236, 245, 181, 239, 196, 202, 143, 215, 146, 157, 162, 154, 144, 148, 142, 126, 121, 107, 116, 811, 129, 147, 128, 106, 142, 140, 126, 133, 143, 129, 133, 128, 115, 130, 150, 135, 132, 125, 121, 137, 133, 136, 104, 106, 158, 138, 143, 148, 817, 141, 144, 161, 158, 157, 1508, 143, 860, 157, 910, 870, 264, 433, 491, 1301, 2719, 846, 1152, 554, 513, 316, 651, 1062, 1458, 6301, 482, 19499, 620, 501137],
}

def compare_histograms(template, target):
    min_len = min(len(template), len(target))
    template = np.array(template[:min_len], dtype=np.float64)
    target = np.array(target[:min_len], dtype=np.float64)

    if np.std(template) == 0 or np.std(target) == 0:
        return 0.0

    corr = np.corrcoef(template, target)[0, 1]
    similarity = max(0.0, min(1.0, (corr + 1) / 2))
    return similarity * 100

@router.post("/histograma")
async def histograma(file: UploadFile = File(...)):
    try:
        contents = await file.read()
        image = Image.open(io.BytesIO(contents)).convert("RGB")
    except Exception:
        raise HTTPException(status_code=400, detail="No se pudo procesar la imagen. Asegúrese de que el archivo sea una imagen válida.")

    try:
        histogram = image.histogram()
        r = histogram[0:256]
        g = histogram[256:512]
        b = histogram[512:768]
    except Exception:
        raise HTTPException(status_code=500, detail="Error al calcular el histograma de la imagen.")
    similitud_r = compare_histograms(TEMPLATE_HISTOGRAM["r"], r)
    similitud_g = compare_histograms(TEMPLATE_HISTOGRAM["g"], g)
    similitud_b = compare_histograms(TEMPLATE_HISTOGRAM["b"], b)
    similitud_total = (similitud_r + similitud_g + similitud_b) / 3

    return {
        "r": r,
        "g": g,
        "b": b,
        "similitud": round(similitud_total, 2)
    }